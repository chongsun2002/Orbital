// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model User {
  // Auth JS schema requirements
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String          @db.VarChar(60)
  bio           String?
  birthday      DateTime?
  isPublic      Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Project specific fields
  requestedFriendships FriendRequest[]     @relation("Requestor") // Friendships where the user is the requestor
  receivedFriendships  FriendRequest[]     @relation("Receipient") // Friendships where the user is the receipient of the request.
  friends              User[]              @relation("Friends")
  // Necessary to satisfy Prisma's self-relation rules, but will not be directly accessed
  symmetricFriends     User[]              @relation("Friends")

  coursesEnrolled      CourseEnrollment[]  
  organisedActivities  Activity[]          @relation("Organiser") // Activities where the user is the organiser.
  inActivities         Activity[]          @relation("Participant") // Activities where the user is participating.

  timetableUrl         String?
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String  @id @default(cuid())
  name        String
  courseCode  String
  description String?
  enrollments CourseEnrollment[] 
}

model CourseEnrollment {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  dateEnrolled DateTime
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
}

enum ActivityLocation {
  NUS
  NTU
  ANYWHERE
}

enum ActivityCategory {
  STUDY
  SPORTS
  DINING
  LEISURE
  OTHERS
}

model Activity {
  id                String    @id @default(cuid()) 
  title             String
  description       String?
  startTime         DateTime 
  endTime           DateTime
  organiser         User      @relation("Organiser", fields: [organiserId], references: [id], onDelete: Cascade)
  organiserId       String
  numOfParticipants Int
  category          ActivityCategory
  location          ActivityLocation
  participants      User[]    @relation("Participant")
}

model FriendRequest {
  // User 1 is the requestor of the friendship, User 2 is the receipient of the request.
  // This remains even after the friendship status is Friends
  id        String   @id @default(cuid())
  user1Id   String
  user1     User     @relation("Requestor", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id   String
  user2     User     @relation("Receipient", fields: [user2Id], references: [id], onDelete: Cascade)
  isSecret  Boolean

  @@unique([user1Id, user2Id])
}